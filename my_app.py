# -*- coding: utf-8 -*-
"""my_app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14OTJRW8tpuQgwuZZpqoQk1WPybOj4uxr
"""

import dash
from dash import html, dcc
from dash.dependencies import Input, Output, State
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import date
import numpy as np

covid_df = pd.read_csv("covid_19_clean_f.csv")

covid_who = pd.read_csv("covid_who.csv")

covid_who.drop(["Unnamed: 0", "Province/State"], axis=1, inplace=True)

covid_who["Date"] = pd.to_datetime(covid_who["Date"])

confirmed, deaths, recovered = covid_who[covid_who["Date"] == covid_who["Date"].max()][
    ["Confirmed", "Deaths", "Recovered/Active"]].sum()

fig_line_con = px.line(covid_who.groupby("Date").sum().reset_index(),
                       x="Date",
                       y="Confirmed",
                       line_shape="hv",

                       title="The changes of confirmed cases over time").update_layout(
    xaxis_title="Date",
    yaxis_title="Number of Cases").update_traces(
    line_color="orange")
fig_line_dth = px.line(covid_who.groupby("Date").sum().reset_index(),
                       x="Date",
                       y="Deaths",
                       line_shape="hv",

                       title="The changes of deaths cases over time").update_layout(
    xaxis_title="Date",
    yaxis_title="Number of Cases").update_traces(
    line_color="red")
fig_line_rec = px.line(covid_who.groupby("Date").sum().reset_index(),
                       x="Date",
                       y="Recovered/Active",
                       line_shape="hv",

                       title="The changes of recovered cases over time").update_layout(
    xaxis_title="Date",
    yaxis_title="Number of Cases").update_traces(
    line_color="green")
# fig_line.show()

top_conf = covid_who.groupby("Country/Region")["Confirmed"].max().reset_index().sort_values(by="Confirmed",
                                                                                            ascending=False).head(10)

top_dth = covid_who.groupby("Country/Region")["Deaths"].max().reset_index().sort_values(by="Deaths",
                                                                                        ascending=False).head(10)

fig_tcon = px.bar(top_conf, x="Country/Region",
                  y="Confirmed",
                  title="Top 10 countries in confirmed cases",
                  color="Country/Region").update_layout(
    xaxis_title="Country",
    yaxis_title="No of cases")
# fig_tcon.show()

fig_tdth = px.bar(top_dth,
                  x="Country/Region",
                  y="Deaths",
                  color="Country/Region",
                  title="Top 10 countries in deaths").update_layout(
    xaxis_title="Country",
    yaxis_title="No of cases"
)
# fig_tdth.show()

who = covid_who[covid_who["Date"] == covid_who["Date"].max()].groupby("WHO Region")[
    "Confirmed", "Deaths"].sum().reset_index()
who
fig_reg_conf = px.pie(who, names="WHO Region",
                      values=who["Confirmed"] / who["Confirmed"].sum(),
                      title="Confirmed cases proportion by WHO region ").update_traces(
    textposition="inside",
    textinfo="percent+label"
)
# fig_reg_conf.show()

fig_reg_dth = px.pie(who, names="WHO Region",
                     values=who["Deaths"] / who["Deaths"].sum(),
                     title="Death cases proportion by WHO region ").update_traces(
    textposition="inside",
    textinfo="percent+label")

# fig_reg_dth.show()
#map
df_map = pd.read_csv('covid_19_data_cleaned.csv', parse_dates=['Date'])
df_map['Date'] = df_map['Date'].astype(str)
fig_map = px.density_mapbox(df_map, lat = 'Lat', lon = 'Long', hover_name = 'Country', hover_data = ['Confirmed', 'Recovered', 'Deaths','Active'], animation_frame='Date', color_continuous_scale='Portland', radius = 7, zoom = 0, height= 700)
fig_map.update_layout(title = 'Worldwide Covid-19 Cases with Time Laps')
fig_map.update_layout(mapbox_style = 'open-street-map', mapbox_center_lon = 0)



app = dash.Dash()
server = app.server

app.layout = html.Div(children=[
    html.H1("Covid 19 Dashboard"),
    html.Hr(),
    html.Div([
        html.Div([
            html.Div("Confirmed Cases"),
            html.P(f"{confirmed}")
        ], style={'display': 'inlineBlock', 'backgroundColor': 'yellow', 'width': '30%', 'textAlign': 'center',
                  'padding': '10px'}),
        html.Div([
            html.Div("Deaths Cases"),
            html.P(f"{deaths}")
        ], style={'display': 'inlineBlock', 'backgroundColor': 'red', 'width': '30%', 'textAlign': 'center',
                  'padding': '10px'}),
        html.Div([
            html.Div("Recovereded Cases"),
            html.P(f"{recovered}")
        ], style={'display': 'inlineBlock', 'backgroundColor': 'green', 'width': '30%', 'textAlign': 'center',
                  'padding': '10px'})
    ], style={'display': 'flex'}),
    html.Div([dcc.Graph(figure=fig_line_con, style={'width': '30%'}),
              dcc.Graph(figure=fig_line_dth, style={'width': '30%'}),
              dcc.Graph(figure=fig_line_rec, style={'width': '30%'})], style={'display': 'flex'}),

    html.Div([
        dcc.Graph(figure=fig_tcon),
        dcc.Graph(figure=fig_tdth)

    ], style={'display': 'flex'}),
    html.Div([
        dcc.Graph(figure=fig_map)
    ]),
    html.Div([
        dcc.Graph(figure=fig_reg_conf),
        dcc.Graph(figure=fig_reg_dth)

    ], style={'display': 'flex'}),
    html.Div([
        html.H3("Covid 19 Cases For Country in Specific Time Period")

    ]),

    html.Div([
        dcc.DatePickerRange(
            id='my-date-picker-range',
            min_date_allowed=covid_df['Date'].min(),
            max_date_allowed=covid_df['Date'].max(),
            initial_visible_month=covid_df['Date'].min(),
            end_date=covid_df['Date'].max()
        ),
        dcc.Dropdown(covid_df['Country/Region'], 'Egypt', id='dropdown', style={'width': '30%'})
    ], style={'display': 'flex'}),
    html.Div([], id='output-container')

])


@app.callback(
    Output('output-container', 'children'),
    [Input('my-date-picker-range', 'start_date'),
     Input('my-date-picker-range', 'end_date'),
     Input('dropdown', 'value')])
def get_graph(start_date, end_date, country):
    filtered_df = covid_df.loc[(covid_df['Date'] >= start_date) & (covid_df['Date'] <= end_date)]
    filtered_df = filtered_df[filtered_df['Country/Region'] == country]
    fig1 = px.line(filtered_df, x='Date', y=['Confirmed', 'Deaths', 'Recovered/Active'],
                   title=f'Cases from{start_date} to {end_date} In {country}')
    return dcc.Graph(figure=fig1)


if __name__ == "__main__":
    app.run_server(debug=True)
